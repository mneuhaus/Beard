<?php
namespace Famelo\Beard\Scaffold\Builder\Typo3;

use Famelo\Beard\Utility\Path;
use Famelo\Beard\Utility\StringUtility;


/**
 */
class ExtEmconfBuilder {

	const TEMPLATE_FILE = '
<?php

	/***************************************************************
	 * Extension Manager/Repository config file for ext: "%s"
	 *
	 * Auto generated by famelo/soup %s
	 *
	 * Manual updates:
	 * Only the data in the array - anything else is removed by next write.
	 * "version" and "dependencies" must not be touched!
	 ***************************************************************/

	$EM_CONF[$_EXTKEY] = %s;
	';

	/**
	 * @var string
	 */
	protected $filepath;

	/**
	 * @var string
	 */
	protected $data = array(
		'constraints' => array(
			'depends' => array()
		)
	);

	/**
	 * load an ext_emconf file
	 *
	 * @param string($filepath
	 */
	public function __construct($filepath = 'ext_emconf.php') {
		$this->filepath = $filepath;

		if (file_exists($this->filepath)) {
			$_EXTKEY = 'foo';
			$EM_CONF = array();
			require($this->filepath);
			$this->data = $EM_CONF[$_EXTKEY];
		}
	}

	/**
	 * add a new dependency
	 *
	 * @param string $extension
	 * @param string $version
	 */
	public function addDependency($extension, $version = '') {
		$this->data['constraints']['depends'][$extension] = $version;
	}

	/**
	 * remove a dependency
	 *
	 * @param string $extension
	 * @return void
	 */
	public function removeDependency($extension) {
		unset($this->data['constraints']['depends'][$extension]);
	}

	/**
	 * save this file
	 */
	public function save() {
		$output = sprintf(self::TEMPLATE_FILE, basename($this->filepath), date('Y-m-d'), var_export($this->data, TRUE) );
		file_put_contents($this->filepath, trim($output));
	}
}

?>
